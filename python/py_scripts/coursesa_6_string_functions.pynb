{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number: 7\n",
      "Enter a number: 2\n",
      "Enter a number: bob\n",
      "Invalid input\n",
      "Enter a number: 10\n",
      "Enter a number: 4\n",
      "Enter a number: done\n",
      "Maximum 10\n",
      "Minimum  2\n"
     ]
    }
   ],
   "source": [
    "#if type(num) == int\n",
    "largest = None\n",
    "smallest = None\n",
    "while True:\n",
    "\ttry:\n",
    "\t\tnum = input(\"Enter a number: \")\n",
    "\t\tif num == \"done\":\n",
    "\t\t\tbreak\n",
    "\t\tnum1 = int(num)\n",
    "\t\tif smallest is None:\n",
    "\t\t\tsmallest = num1\n",
    "\t\tif largest is None:\n",
    "\t\t\tlargest = num1               \n",
    "\t\tif num1 > largest:\n",
    "\t\t\tlargest = num1\n",
    "\t\tif num1 < smallest:\n",
    "\t\t\tsmallest = num1\n",
    "\texcept Exception as e:\n",
    "\t\tprint(\"Invalid input\")\n",
    "print(\"Maximum\", largest)\n",
    "print(\"Minimum \", smallest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello\n"
     ]
    }
   ],
   "source": [
    "print(\"Hello\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a\n",
      "b\n",
      "c\n",
      "d\n",
      " \n",
      "a\n",
      "b\n",
      "a\n",
      "c\n",
      " \n",
      "a\n",
      "b\n",
      "a\n",
      "c\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "string iteration\n",
    "'''\n",
    "wrd='abcd abac abac'\n",
    "\n",
    "for i in wrd:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lear\n",
      "Pyth\n",
      "Python Hello\n",
      "Lear\n",
      "olHnhy re\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "slicing\n",
    "\n",
    "s[a:b]\n",
    "\n",
    "second number : upto but not including\n",
    "'''\n",
    "\n",
    "s = 'Learn Python Hello'\n",
    "\n",
    "#from 0 index i.e 1st char (i.e. 0th char), up to 4 but not icluding index 4 , so upto to 4th char\n",
    "print(s[0:4])\n",
    "#o/p: Lear\n",
    "\n",
    "print(s[:4])\n",
    "#o/p: Lear\n",
    "\n",
    "# from 6 index i.e. 7th char , up to 10 but not icluding index 10, upto 10th char\n",
    "print(s[6:10])\n",
    "#o/p: Pyth\n",
    "\n",
    "#from 7th char, upto end of string \n",
    "print(s[6:])\n",
    "#o/p: Python Hello\n",
    "\n",
    "\n",
    "print(s[:4])\n",
    "\n",
    "print(s[::-2])\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found it!!\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "STRING LOGICAL OPERATORS\n",
    "'''\n",
    "\n",
    "\n",
    "s='Hello World'\n",
    "\n",
    "\n",
    "'o' in s\n",
    "#o/p : True\n",
    "\n",
    "'LL' in s\n",
    "#o/p : False\n",
    "\n",
    "'Tr' in s\n",
    "#o/p : False\n",
    "\n",
    "\n",
    "if 'e' in s:\n",
    "    print(\"Found it!!\")\n",
    "#o/p : Found it!!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Both are equal\n",
      "Both are equal\n",
      "a is GREATER than A\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "\n",
    "STRING COMPARISIONS\n",
    "\n",
    "Usally upper case characters are less than lower case characters\n",
    "\n",
    "'''\n",
    "\n",
    "word='banana'\n",
    "\n",
    "\n",
    "if word == 'banana':\n",
    "    print(\"Both are equal\")\n",
    "\n",
    "if word > 'banana':\n",
    "    print(\"Our word : \"+word+\"comes AFTER 'banana'\")\n",
    "elif word < 'banana':\n",
    "    print(\"Our word : \"+word+\"comes BEFORE 'banana'\")\n",
    "else:\n",
    "    print(\"Both are equal\")\n",
    "    \n",
    "'''\n",
    "o/p:\n",
    "\n",
    "Both are equal\n",
    "Both are equal\n",
    "'''\n",
    "\n",
    "\n",
    "if 'a' > 'A':\n",
    "    print(\"a is GREATER than A\")\n",
    "else:\n",
    "    print(\"a is LESSER than A\")\n",
    "    \n",
    "#o/p : a is GREATER than A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original word : Hello World\n",
      "Lower case word : hello world\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "\n",
    "STRING FUNCTIONS\n",
    "\n",
    "'''\n",
    "\n",
    "word='Hello World'\n",
    "\n",
    "word1=word.lower()\n",
    "\n",
    "print(\"Original word : \"+word)\n",
    "\n",
    "print(\"Lower case word : \"+word1)\n",
    "\n",
    "'''\n",
    "o/p:\n",
    "\n",
    "Original word : Hello World\n",
    "Lower case word : hello world\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Position of 'H' : 0\n",
      "Position of 'l' : 2\n",
      "Position of 'M' : -1\n"
     ]
    }
   ],
   "source": [
    "\n",
    "'''\n",
    "\n",
    "Search string : find operations\n",
    "\n",
    "if the char is not found '-1' is returned\n",
    "'''\n",
    "\n",
    "word = 'Hello'\n",
    "\n",
    "pos=word.find('H')\n",
    "print(\"Position of 'H' : \"+str(pos))\n",
    "#o/p: Position of 'H' : 0\n",
    "\n",
    "pos=word.find('l')\n",
    "print(\"Position of 'l' : \"+str(pos))\n",
    "#o/p : Position of 'l' : 2\n",
    "\n",
    "\n",
    "#given M is not present in 'Hello'\n",
    "pos=word.find('M')\n",
    "print(\"Position of 'M' : \"+str(pos))\n",
    "#o/p : Position of 'M' : -1\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello world three\n",
      "HellK wKrld twK\n",
      "Hello space\n",
      "Hello space \n",
      " Hello space\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "\n",
    "String functions\n",
    "'''\n",
    "\n",
    "word ='Hello world two'\n",
    "\n",
    "#search and replace\n",
    "print(word.replace('two','three'))\n",
    "\n",
    "\n",
    "#search and replace\n",
    "print(word.replace('o','K'))\n",
    "# o/p : HellK wKrld twK\n",
    "\n",
    "#o/p : Hello world three\n",
    "\n",
    "\n",
    "wrd1=' Hello space '\n",
    "\n",
    "print(wrd1.strip())\n",
    "\n",
    "print(wrd1.lstrip())\n",
    "#o/p: Hello space\n",
    "\n",
    "print(wrd1.rstrip())\n",
    "#o/p:  Hello space\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "@ position is : 42\n",
      "Next space after @ position is : 46\n",
      "Timze zone : EST\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\no/p:\\n\\n@ position is : 42\\n\\nNext space after @ position is : 46\\n\\n\\n\\n'"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "\n",
    "Parsing and Extracing\n",
    "\n",
    "search foe '@' and print the time zone after that \n",
    "\n",
    "1- search @ postion\n",
    "2- find next space after @ position \n",
    "3- print the time zone from next pos of @ to space positon\n",
    "\n",
    "'''\n",
    "\n",
    "\n",
    "line='Hello search for something time is 11.30PM@EST and today is thrusday'\n",
    "\n",
    "#1\n",
    "atPos=line.find('@')\n",
    "print('@ position is : '+str(atPos))\n",
    "\n",
    "\n",
    "#2 - this code will find the space character starting from the position in the 2nd variable\n",
    "spcePos=line.find(' ',atPos)\n",
    "print('Next space after @ position is : '+str(spcePos))\n",
    "\n",
    "\n",
    "#3\n",
    "timzone=line[atPos+1:spcePos]\n",
    "print('Timze zone : '+timzone)\n",
    "'''\n",
    "o/p:\n",
    "\n",
    "@ position is : 42\n",
    "\n",
    "Next space after @ position is : 46\n",
    "\n",
    "Timze zone : EST\n",
    "\n",
    "\n",
    "\n",
    "'''\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hellothere\n",
      "42\n",
      "q\n",
      "uct\n",
      "42\n",
      ".ma\n"
     ]
    }
   ],
   "source": [
    "str1 = \"Hello\"\n",
    "str2 = 'there'\n",
    "bob = str1 + str2\n",
    "print(bob)\n",
    "\n",
    "\n",
    "'''\n",
    "o/p:\n",
    "Hellothere\n",
    "\n",
    "'''\n",
    "\n",
    "x = '40'\n",
    "y = int(x) + 2\n",
    "print(y)\n",
    "\n",
    "#o/p: 42\n",
    "\n",
    "x = 'From marquard@uct.ac.za'\n",
    "print(x[8])\n",
    "#o/p: q\n",
    "\n",
    "# How would you use string slicing [:] to print out 'uct' from the following string?\n",
    "x = 'From marquard@uct.ac.za'\n",
    "print(x[14:17])\n",
    "\n",
    "# What does the following Python code print out?\n",
    "print(len('banana')*7)\n",
    "#o/p: 42\n",
    "\n",
    "#What will the following Python code print out?\n",
    "data = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'\n",
    "pos = data.find('.')\n",
    "print(data[pos:pos+3])\n",
    "\n",
    "#o/p: .ma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number in string : 0.8475\n",
      "0.8475\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "Write code using find() and string slicing (see section 6.10) to \n",
    "extract the number at the end of the line below.\n",
    "Convert the extracted value to a floating point number and print it out.\n",
    "'''\n",
    "\n",
    "text = \"X-DSPAM-Confidence:    0.8475\"\n",
    "\n",
    "zeroPos=text.find('0')\n",
    "num=text[zeroPos:]\n",
    "print('Number in string : '+num)\n",
    "# o/p: Number in string : 0.8475\n",
    "\n",
    "print(float(num))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
