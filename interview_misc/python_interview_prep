
1. yield
2. count occurnaces




--------------------------------------------------------------------------------------------------
2. coding 

How to count the occurrences of a particular element in the list?

A) In Python list, we can count the occurrences of an individual element by using a <count()> function.

Example # 1:

weekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']
print(weekdays.count('mon'))
Output: 3

Example # 2:

weekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']
print([[x,weekdays.count(x)] for x in set(weekdays)])
output: [[‘wed’, 1], [‘sun’, 2], [‘thu’, 1], [‘tue’, 1], [‘mon’, 3], [‘fri’, 1]]

Example # 3:

weekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']
d={}
for x in weekdays:
...     if x in d.keys():
...             d[x]+=1
...     else:
...             d[x]=1
... 
>>> print(d)
{'wed': 1, 'sun': 2, 'thu': 1, 'tue': 1, 'mon': 3, 'fri': 1}
--------------------------------------------------------------------------------------------------
1. yield 

When to use yield instead of return in Python?
Difficulty Level : Easy
Last Updated : 21 Jul, 2021
The yield statement suspends function’s execution and sends a value back to the caller, but retains enough state to enable function to resume where it is left off. When resumed, the function continues execution immediately after the last yield run. This allows its code to produce a series of values over time, rather than computing them at once and sending them back like a list.

Let’s see with an example:


# A Simple Python program to demonstrate working
# of yield
  
# A generator function that yields 1 for the first time,
# 2 second time and 3 third time
def simpleGeneratorFun():
    yield 1
    yield 2
    yield 3
  
# Driver code to check above generator function
for value in simpleGeneratorFun(): 
    print(value)
Output:

1
2
3
--------------------------------------------------------------------------------------------------
