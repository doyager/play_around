
1. yield
2. count occurnaces
3. negative indexes




--------------------------------------------------------------------------------------------------

3. negative indexes

Python has a special feature like a negative index in Arrays and Lists.
Positive index reads the elements from the starting of an array or
list but in the negative index, Python reads elements from the end of an array or list.

>>> a=[1,5,6]
>>> print(a[1])
5
>>> print(a[-1])
6
>>> print(a[-2])
5
>>> print(a[-3])
1
>>> print(a[0])
1
>>> print(a[2])
6


>>>names = ['Chris', 'Jack', 'John', 'Daman']
>>>print(names[-1][-1])
A) The output is: n




--------------------------------------------------------------------------------------------------
2. coding 

How to count the occurrences of a particular element in the list?

A) In Python list, we can count the occurrences of an individual element by using a <count()> function.

Example # 1:

weekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']
print(weekdays.count('mon'))
Output: 3

Example # 2:

weekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']
print([[x,weekdays.count(x)] for x in set(weekdays)])
output: [[‘wed’, 1], [‘sun’, 2], [‘thu’, 1], [‘tue’, 1], [‘mon’, 3], [‘fri’, 1]]

Example # 3:

weekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']
d={}
for x in weekdays:
...     if x in d.keys():
...             d[x]+=1
...     else:
...             d[x]=1
... 
>>> print(d)
{'wed': 1, 'sun': 2, 'thu': 1, 'tue': 1, 'mon': 3, 'fri': 1}
--------------------------------------------------------------------------------------------------
1. yield 

When to use yield instead of return in Python?
Difficulty Level : Easy
Last Updated : 21 Jul, 2021
The yield statement suspends function’s execution and sends a value back to the caller, but retains enough state to enable function to resume where it is left off. When resumed, the function continues execution immediately after the last yield run. This allows its code to produce a series of values over time, rather than computing them at once and sending them back like a list.

Let’s see with an example:


# A Simple Python program to demonstrate working
# of yield
  
# A generator function that yields 1 for the first time,
# 2 second time and 3 third time
def simpleGeneratorFun():
    yield 1
    yield 2
    yield 3
  
# Driver code to check above generator function
for value in simpleGeneratorFun(): 
    print(value)
Output:

1
2
3
--------------------------------------------------------------------------------------------------


# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
print("Hello world")

b =  [ [2,3],[3,4],[5]]
a = [[1, 2, 3, 4], [5, 6], [7, 8, 9]]
for row in a:
    for elem in row:
        print(elem, end=' ')
    print()

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

x = car.keys()

car["color"] = "white"

print(x)
#########
# Python3 Program to check whether a 
# given key already exists in a dictionary.
  
# Function to print sum
def checkKey(dict, key):
      
    if key in dict.keys():
        print("Present, ", end =" ")
        print("value =", dict[key])
    else:
        print("Not present")
  
# Driver Code
dict = {'a': 100, 'b':200, 'c':300}
  
key = 'b'
checkKey(dict, key)
  
key = 'w'
checkKey(dict, key)
#########

#In this method, we will use conditions 
#for checking the key and then append the list into the dictionary.


Details = {}
Details["Age"] = [20]
print(Details)
  
if "Age" in Details:
    Details["Age"].append("Twenty")
    print(Details)

#########
# using list comprehension
# to get first and last element of list
# initializing list 
test_list = [1, 5, 6, 7, 4]
res =  [ test_list[i] for i in (0, -1) ]

########
# Python3 code to demonstrate 
# to get first and last element of list
# using List slicing
  
# initializing list 
test_list = [1, 5, 6, 7, 4]
  
# printing original list 
print ("The original list is : " +  str(test_list))
  
# using List slicing
# to get first and last element of list
res = test_list[::len(test_list)-1] 
  
# printing result
print ("The first and last element of list are : " +  str(res))


##########
## List get all values but first value 

#You can just do [1:]. This will work on both versions.

#########
###### initialize a set 
# initialize a with set()
a = set()
# check data type of a
print(type(a))
#o/p: <class 'set'>
#########

frnds_dict = {}
for row in b:
    for ele in row[1:] :
            #frnds_dict[row[0]].append(ele)
            frnds_dict[row[0]].add(ele)
        #if row[0] in frnds_dict.keys():
        #else:
            
            
            

        
